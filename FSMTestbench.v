`timescale 1ns / 1ps  // 设置时间单位为1纳秒，时间精度为1皮秒，用于仿真环境。

module FSMTestbench;  // 定义模块FSMTestbench，这是一个测试平台模块。

reg x, y, rst, clk;  // 定义输入寄存器和时钟信号
wire z;  // 定义输出线

FSM fsm(  // 实例化有限状态机FSM，并连接端口
    .x(x),  // 输入端口x
    .y(y),  // 输入端口y
    .z(z),  // 输出端口z
    .clk(clk)  // 时钟信号
);

initial clk = 0;  // 初始化时钟信号为0
always #5 clk = ~clk;  // 每5个时间单位时钟信号取反一次

// 测试序列
initial begin
    #10 rst = 1; x = 0; y = 0;  // 10个时间单位后，设置复位信号为1，x和y为0
    #10 rst = 0;  // 10个时间单位后，取消复位信号

    // 不同组合输入并观察输出状态变化
    #10 x = 1; y = 0;  // 10个时间单位后，设置x为1，y为0
    #10 x = 1; y = 0;  // 10个时间单位后，再次设置x为1，y为0
    #10 x = 0; y = 1;  // 10个时间单位后，设置x为0，y为1
    #10 x = 0; y = 1;  // 10个时间单位后，再次设置x为0，y为1

    #10 rst = 1; x = 0; y = 0;  // 10个时间单位后，重新设置复位信号为1，x和y为0
    #10 rst = 0;  // 10个时间单位后，取消复位信号
    #10 x = 0; y = 1;  // 10个时间单位后，设置x为0，y为1
    #10 x = 1; y = 0;  // 10个时间单位后，设置x为1，y为0
    #10 x = 1; y = 0;  // 10个时间单位后，再次设置x为1，y为0
    #10 x = 0; y = 1;  // 10个时间单位后，再次设置x为0，y为1

    $stop;  // 停止仿真
end

// 监视输出和内部状态
initial begin
    $monitor("Time=%t, rst=%b, x=%b, y=%b, z=%b, state=%b", $time, rst, x, y, z, fsm.state);
    // 使用$monitor跟踪和显示时间，复位信号，输入x, y，输出z以及状态机当前状态
end

endmodule
